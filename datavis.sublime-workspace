{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"select",
				"selectAll"
			],
			[
				"life",
				"life_expectancy_data"
			],
			[
				"year",
				"yearDisp"
			],
			[
				"fun",
				"function"
			],
			[
				"ye",
				"yearDisp"
			],
			[
				"ge",
				"getThrottle()	double"
			],
			[
				"getp",
				"getPosition()	double *"
			],
			[
				"Del",
				"DeltaLongitude	double"
			],
			[
				"De",
				"DeltaLongitude	double"
			],
			[
				"wa",
				"waypoint	wayPoint *"
			],
			[
				"wayp",
				"waypoints	std::vector<wayPoint *>"
			],
			[
				"read",
				"reached	int"
			],
			[
				"alig",
				"alignOnGround()	void"
			],
			[
				"Norma",
				"normpdf(double x, double mean, double variance)	double"
			],
			[
				"set",
				"setRudder(double interpolation)	void"
			],
			[
				"goal",
				"goal_pitch	double"
			],
			[
				"getP",
				"getPosition()	double *"
			],
			[
				"get",
				"getPosition()	double *"
			],
			[
				"nor",
				"normalize(double *vector)	void"
			],
			[
				"D",
				"Drone	UAV *"
			],
			[
				"corre",
				"correctYawElivator(double max)	double"
			],
			[
				"corr",
				"correctYawElivator(double max)	double"
			],
			[
				"core",
				"correctYaw()	double"
			],
			[
				"norm",
				"normpdf(double x, double mean, double variance)	double"
			],
			[
				"rec",
				"recieved_time_interval	double"
			],
			[
				"curre",
				"current_output	float *"
			],
			[
				"expo",
				"exploring	int"
			],
			[
				"expl",
				"exploring	int"
			],
			[
				"curr",
				"current_output	float *"
			],
			[
				"tare",
				"target_yaw	double"
			],
			[
				"target",
				"target_roll	double"
			],
			[
				"targe",
				"target_yaw	double"
			],
			[
				"targ",
				"target	double **"
			],
			[
				"tar",
				"target_pitch	double"
			],
			[
				"getDelt",
				"getDeltaRollError(int i)	double"
			],
			[
				"getDet",
				"getDeltaDeltaPitchError"
			],
			[
				"getPitch",
				"getPitchError(int i)	double"
			],
			[
				"getPi",
				"getPitchError(int i)	double"
			],
			[
				"delt",
				"delta_pitch_error	double"
			],
			[
				"delta",
				"delta_roll_error	double"
			],
			[
				"pre",
				"previous_output	float *"
			],
			[
				"output",
				"previous_output	float *"
			],
			[
				"pr",
				"previous_output	float *"
			],
			[
				"prev",
				"previous_output	float *"
			],
			[
				"g",
				"getPitch()	double"
			],
			[
				"current",
				"current_input	float *"
			],
			[
				"setState",
				"setState(double pitch, double yaw, double roll, double lat, double lon)	void"
			],
			[
				"FANN_SIG",
				"FANN_SIGMOID_SYMMETRIC	fann_activationfunc_enum"
			],
			[
				"sign",
				"signgam	int"
			],
			[
				"FANN_TRAIN_",
				"FANN_TRAIN_RPROP	fann_train_enum"
			],
			[
				"le",
				"learning_momentum	float"
			],
			[
				"cur",
				"current_error	double"
			],
			[
				"lea",
				"learning_rate	float"
			],
			[
				"fann_train_on_",
				"fann_train_epoch(struct fann *ann, struct fann_train_data *data)	float"
			],
			[
				"fann_train",
				"fann_train_data	struct"
			],
			[
				"max",
				"maximum_angle_of_attack	double"
			],
			[
				"vect",
				"vector2	double *"
			],
			[
				"vec",
				"vector2	double *"
			],
			[
				"len",
				"length(double *vector)	double"
			],
			[
				"leng",
				"length2d(double vx, double vy)	double"
			],
			[
				"norma",
				"normalize2d(double *vx, double *vy)	void"
			],
			[
				"pow",
				"pow(double __x, double __y)	double"
			],
			[
				"roll",
				"getRoll()	double"
			],
			[
				"getMa",
				"getMagnetometer_z()	double"
			],
			[
				"getGyr",
				"getGyroscope_roll()	double"
			]
		]
	},
	"buffers":
	[
		{
			"file": "practicum3/index.html",
			"settings":
			{
				"buffer_size": 1537,
				"line_ending": "Unix"
			}
		},
		{
			"file": "practicum3/script/azimuthal.js",
			"settings":
			{
				"buffer_size": 3560,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// Zo maak je een class in javascript\nfunction Map(id) {\n    var width = 800,\n        height = 400,\n        centered;\n\n    var projection = d3.geo.equirectangular()\n        .scale(width)\n        .translate([0, 0]);\n\n    var path = d3.geo.path()\n        .projection(projection);\n\n    var svg = d3.select(id).append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height);\n\n    svg.append(\"rect\")\n        .attr(\"class\", \"background\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .on(\"click\", click);\n\n    var g = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\")\n      .append(\"g\")\n        .attr(\"id\", \"states\");\n\n    d3.json(\"data/world-countries.json\", function(json) {\n      g.selectAll(\"path\")\n          .data(json.features)\n        .enter().append(\"path\")\n        .attr(\"n\",function(d,i){\n            return json.features[i].properties.name;\n        })\n        .style(\"fill\",function(d,i)\n        {\n            return \"rgb(40,40,40)\";\n        })\n        .style(\"stroke\",function(d,i)\n        {\n            return \"rgb(0,0,0)\";\n        })     \n          .attr(\"d\", path)\n          .on(\"click\", click)\n          .on(\"mouseover\", selectLand)\n          .on(\"mouseout\" , deselectLand);\n    ;\n    });\n\n    this.loadMap = function(data)\n    {\n        var list = g.selectAll(\"path\")[0];\n        \n        var min =  9999;\n        var max = -9999;\n\n        list.forEach(function(i)\n        {\n            var value = data[$(i).attr(\"n\")];\n            if(value>max && !isNaN(value))\n                max=value;\n            if(value<min && !isNaN(value))\n                min=value;\n        });\n\n        list.forEach(function(i)\n        {\n            $(i).attr(\"style\",function(d,index,rr){\n                var value = data[$(i).attr(\"n\")];\n                var color = gradient(1,0.35,0,min,max,value);\n                return \"fill: \" + color + \";stroke: rgb(0,0,0)\";\n            });\n        });\n    }\n\n    this.zoom = function(d)\n    {\n          var x = 0,\n              y = 0,\n              k = 1;\n\n          if (d && centered !== d) {\n            var centroid = path.centroid(d);\n            x = -centroid[0];\n            y = -centroid[1];\n            k = 4;\n            centered = d;\n          } \n          else {\n            centered = null;\n          }\n\n          g.selectAll(\"path\")\n              .classed(\"active\", centered && function(d) { return d === centered; });\n\n          g.transition()\n              .duration(1000)\n              .attr(\"transform\", \"scale(\" + k + \")translate(\" + x + \",\" + y + \")\")\n              .style(\"stroke-width\", 1.5 / k + \"px\");\n    }\n\n\n    function click(d) {\n      var x = 0,\n          y = 0,\n          k = 1;\n\n      if (d && centered !== d) {\n        var centroid = path.centroid(d);\n        x = -centroid[0];\n        y = -centroid[1];\n        k = 4;\n        centered = d;\n      } else {\n        centered = null;\n      }\n\n      g.selectAll(\"path\")\n          .classed(\"active\", centered && function(d) { return d === centered; });\n\n      g.transition()\n          .duration(1000)\n          .attr(\"transform\", \"scale(\" + k + \")translate(\" + x + \",\" + y + \")\")\n          .style(\"stroke-width\", 1.5 / k + \"px\");\n    }\n}\n\n\nfunction AdBox() {\nthis.width = 200;\nthis.height = 60;\nthis.text = 'default ad text';\nthis.prototype.move = function() {\n    console.log(\"hello world\");\n}\nthis.prototype.display = function() {\n// code for display method goes here\n}\n}",
			"file": "practicum3/script/map.js",
			"file_size": 3846,
			"file_write_time": 1357412877000000,
			"settings":
			{
				"buffer_size": 3463,
				"line_ending": "Unix"
			}
		},
		{
			"file": "practicum3/style.css",
			"settings":
			{
				"buffer_size": 1558,
				"line_ending": "Unix"
			}
		},
		{
			"file": "practicum3/style.css2",
			"settings":
			{
				"buffer_size": 1599,
				"line_ending": "Unix"
			}
		},
		{
			"file": "practicum3/script/globals.js",
			"settings":
			{
				"buffer_size": 1553,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "function Graph(id)\n{\n	var data = [3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 7],\n	w = 400,\n	h = 200,\n	margin = 20,\n	y = d3.scale.linear().domain([0, d3.max(data)]).range([0 + margin, h - margin]),\n	x = d3.scale.linear().domain([0, data.length]).range([0 + margin, w - margin])\n\n	var vis = d3.select(id)\n	    .append(\"svg:svg\")\n	    .attr(\"width\", w)\n	    .attr(\"height\", h)\n	 \n	var g = vis.append(\"svg:g\")\n	    .attr(\"transform\", \"translate(0, 200)\");\n\n    var line = d3.svg.line()\n        .x(function(d,i) { return x(i); })\n        .y(function(d) { return -1 * y(d); })\n\n       g.append(\"svg:path\").attr(\"d\", line(data));\n}",
			"file": "practicum3/script/graph.js",
			"file_size": 565,
			"file_write_time": 1357422077000000,
			"settings":
			{
				"buffer_size": 617,
				"line_ending": "Unix"
			}
		},
		{
			"file": "practicum3/script/barchart.js",
			"settings":
			{
				"buffer_size": 2542,
				"line_ending": "Unix"
			}
		},
		{
			"file": "practicum3/script/barcharts.js",
			"settings":
			{
				"buffer_size": 232,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/myC++.sublime-build",
	"command_palette":
	{
		"height": 390.0,
		"selected_items":
		[
			[
				"tab",
				"View: Toggle Tabs"
			],
			[
				"tabs",
				"View: Toggle Tabs"
			],
			[
				"togle",
				"View: Toggle Side Bar"
			],
			[
				"show",
				"Show TODOs: Project and open files"
			],
			[
				"sho",
				"Show TODOs: Project and open files"
			],
			[
				"remv",
				"Package Control: Remove Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"todo",
				"Todo: Add"
			],
			[
				"tod",
				"Todo: List Active"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"util",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"snippe",
				"Snippet: #ifndef … #define … #endif"
			],
			[
				"clang",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"stat",
				"View: Toggle Status Bar"
			],
			[
				"key",
				"Preferences: Key Bindings - User"
			],
			[
				"def",
				"Preferences: Settings - Default"
			],
			[
				"user",
				"Preferences: Settings - User"
			],
			[
				"default",
				"Preferences: Settings - Default"
			],
			[
				"defa",
				"Preferences: Settings - Default"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"package ins",
				"Package Control: Install Package"
			],
			[
				":w",
				":w - Save"
			],
			[
				"side",
				"View: Toggle Side Bar"
			],
			[
				"make",
				"Set Syntax: Makefile"
			],
			[
				"defaut",
				"Preferences: Settings - Default"
			],
			[
				":buil",
				"Build: Build"
			],
			[
				":bui",
				"Build: Build"
			],
			[
				":e",
				":$ - EOF"
			],
			[
				"uav",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				":q",
				"Set Syntax: SQL"
			],
			[
				"defau",
				"Preferences: Settings - Default"
			],
			[
				"keyb",
				"Preferences: Key Bindings - Default"
			],
			[
				"sid	",
				"View: Toggle Side Bar"
			],
			[
				"folder",
				"Project: Add Folder"
			],
			[
				"UAV",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"",
				"About"
			],
			[
				"togle mi",
				"View: Toggle Minimap"
			],
			[
				"toggle ta",
				"View: Toggle Tabs"
			],
			[
				"main",
				"Snippet: main()"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/tux/development/datavis3/practicum3/script/globals.js",
		"/home/tux/development/DRONE PROJECT/FGI.cpp",
		"/home/tux/development/DRONE PROJECT/UAVP.h",
		"/home/tux/development/DRONE PROJECT/UTIL.h",
		"/home/tux/development/DRONE PROJECT/debug.cpp",
		"/home/tux/development/DRONE PROJECT/UTIL.cpp",
		"/home/tux/development/DRONE PROJECT/UAVP.cpp",
		"/home/tux/.config/sublime-text-2/Packages/SublimeClang/SublimeClang.sublime-settings",
		"/home/tux/development/DRONE PROJECT/test.h",
		"/home/tux/development/DRONE PROJECT/project.sublime-workspace",
		"/home/tux/development/DRONE PROJECT/doc/xor_test.c",
		"/home/tux/development/DRONE PROJECT/doc/xor_train.c",
		"/home/tux/development/DRONE PROJECT/UAV.h",
		"/home/tux/development/DRONE PROJECT/UAV.cpp",
		"/home/tux/development/DRONE PROJECT/Makefile",
		"/home/tux/development/DRONE PROJECT/UAVI.cpp",
		"/home/tux/development/DRONE PROJECT/FlightGearInterface.cpp",
		"/home/tux/development/DRONE PROJECT/Drone.cpp",
		"/home/tux/development/DRONE PROJECT/Autopilot.cpp",
		"/home/tux/development/DRONE PROJECT/Drone.h",
		"/home/tux/development/DRONE PROJECT/FlightGearInterface.h",
		"/home/tux/development/DRONE PROJECT/Autopilot.h",
		"/home/tux/development/DRONE PROJECT/FGI.h",
		"/home/tux/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/tux/development/DRONE PROJECT/project.sublime-project",
		"/home/tux/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/tux/development/DRONE PROJECT/build_conf.sublime-build",
		"/home/tux/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/tux/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/home/tux/development/DRONE PROJECT/system.png",
		"/home/tux/development/DRONE PROJECT/UAVI.h",
		"/home/tux/development/DRONE PROJECT/run/tree.sh",
		"/home/tux/.config/sublime-text-2/Packages/User/myBuild.sublime-build",
		"/home/tux/development/DRONE PROJECT/run/runfg.sh"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"data",
			"d",
			"var d",
			"128",
			"256",
			"37",
			"aileron",
			"Aileron",
			"Autopilot",
			"D",
			"UAV",
			"Drone",
			"UAV",
			"\n	instruments = new Instruments();\n	state0 = new State();\n	state1 = new State();\n	state2 = new State();",
			"UAV",
			"fgi",
			"FGI",
			"UAVP",
			"UAVI",
			"0",
			"tar",
			"position",
			"target",
			"globals",
			"target",
			"tmp",
			"orientation",
			"double",
			"45",
			";\n",
			"millis",
			"ctrl+shift+v",
			"previous_output",
			"glPopMatrix",
			"glPopMatrix()",
			"Roll",
			"Yaw",
			"0",
			"make",
			"target",
			"Target",
			"target",
			"Target",
			"target",
			"Target",
			"target",
			"target_pitch",
			"target",
			"new_ori",
			"getDeltaRollError",
			"getDeltaPitchError",
			"getRollError",
			"getYawError",
			"getPitchError",
			"getYawError",
			"getPitchError",
			"}\n",
			"Pitch",
			"0",
			"Yaw",
			"Pitch",
			"3",
			"0",
			"1",
			"4",
			"yaw_error",
			"4",
			"current_input",
			"D->getState(0)",
			"	\n",
			"18",
			"getState(0)",
			"ori",
			"()",
			"fgi->",
			"rMatrix",
			",",
			"D->getOrientation()",
			"0",
			"ori",
			"0",
			"D->getOrientation()",
			"bank",
			"DEG_TO_RAD",
			"refreshInternals",
			"1",
			"0",
			"native",
			"attack_factor",
			"new_ori",
			"ori_c",
			"ori_a",
			"ori",
			"orientation",
			"float",
			"1",
			"0",
			"1",
			"0",
			"float",
			"1",
			"cout"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"refreshInternals"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "practicum3/index.html",
					"settings":
					{
						"buffer_size": 1537,
						"regions":
						{
						},
						"selection":
						[
							[
								858,
								858
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "practicum3/script/azimuthal.js",
					"settings":
					{
						"buffer_size": 3560,
						"regions":
						{
						},
						"selection":
						[
							[
								2020,
								2020
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 708.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "practicum3/script/map.js",
					"settings":
					{
						"buffer_size": 3463,
						"regions":
						{
						},
						"selection":
						[
							[
								1271,
								1271
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 421.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "practicum3/style.css",
					"settings":
					{
						"buffer_size": 1558,
						"regions":
						{
						},
						"selection":
						[
							[
								153,
								153
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1170.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "practicum3/style.css2",
					"settings":
					{
						"buffer_size": 1599,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "practicum3/script/globals.js",
					"settings":
					{
						"buffer_size": 1553,
						"regions":
						{
						},
						"selection":
						[
							[
								662,
								662
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "practicum3/script/graph.js",
					"settings":
					{
						"buffer_size": 617,
						"regions":
						{
						},
						"selection":
						[
							[
								615,
								615
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "practicum3/script/azimuthal.js",
					"settings":
					{
						"buffer_size": 3560,
						"regions":
						{
						},
						"selection":
						[
							[
								347,
								347
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "practicum3/script/barchart.js",
					"settings":
					{
						"buffer_size": 2542,
						"regions":
						{
						},
						"selection":
						[
							[
								580,
								580
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "practicum3/script/barcharts.js",
					"settings":
					{
						"buffer_size": 232,
						"regions":
						{
						},
						"selection":
						[
							[
								231,
								231
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "practicum3/script/map.js",
					"settings":
					{
						"buffer_size": 3463,
						"regions":
						{
						},
						"selection":
						[
							[
								1068,
								1068
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "practicum3/script/globals.js",
					"settings":
					{
						"buffer_size": 1553,
						"regions":
						{
						},
						"selection":
						[
							[
								308,
								308
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.624375,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 62.0
	},
	"output.exec":
	{
		"height": 107.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"map",
				"practicum3/script/map.js"
			],
			[
				"glob",
				"practicum3/script/globals.js"
			],
			[
				"ma",
				"practicum3/script/map.js"
			],
			[
				"glo",
				"practicum3/script/globals.js"
			],
			[
				"grap",
				"practicum3/script/graph.js"
			],
			[
				"azi",
				"practicum3/script/azimuthal.js"
			],
			[
				"gl",
				"practicum3/script/globals.js"
			],
			[
				"globa",
				"practicum3/script/globals.js"
			],
			[
				"css",
				"practicum3/style.css2"
			],
			[
				"az",
				"practicum3/script/azimuthal.js"
			],
			[
				"inde",
				"practicum3/index.html"
			],
			[
				"index",
				"practicum3/index.html"
			],
			[
				"a",
				"practicum3/script/azimuthal.js"
			],
			[
				"barch",
				"practicum3/script/barcharts.js"
			],
			[
				"bar",
				"practicum3/script/barchart.js"
			],
			[
				"barc",
				"practicum3/script/barcharts.js"
			],
			[
				"barchar",
				"practicum3/script/barchart.js"
			],
			[
				"azim",
				"practicum3/script/azimuthal.js"
			],
			[
				"",
				"practicum3/index.html"
			],
			[
				"aut",
				"Autopilot.cpp"
			],
			[
				"uti",
				"UTIL.cpp"
			],
			[
				"util",
				"UTIL.h"
			],
			[
				"auto",
				"Autopilot.h"
			],
			[
				"au",
				"Autopilot.cpp"
			],
			[
				"debug",
				"debug.cpp"
			],
			[
				"fgi",
				"FlightGearInterface.cpp"
			],
			[
				"debu",
				"debug.cpp"
			],
			[
				"drone",
				"Drone.cpp"
			],
			[
				"autopi",
				"Autopilot.h"
			],
			[
				"debg",
				"debug.cpp"
			],
			[
				"deb",
				"debug.cpp"
			],
			[
				"f",
				"FlightGearInterface.cpp"
			],
			[
				"fig",
				"FlightGearInterface.cpp"
			],
			[
				"auth",
				"Autopilot.h"
			],
			[
				"fl",
				"FlightGearInterface.h"
			],
			[
				"dr",
				"Drone.h"
			],
			[
				"d",
				"doc/xor_test.c"
			],
			[
				"flig",
				"FlightGearInterface.cpp"
			],
			[
				"fligh",
				"FlightGearInterface.h"
			],
			[
				"flight",
				"FlightGearInterface.h"
			],
			[
				"fli",
				"FlightGearInterface.cpp"
			],
			[
				"uav",
				"UAV.h"
			],
			[
				"uavp",
				"UAVP.cpp"
			],
			[
				"fgicp",
				"FGI.cpp"
			],
			[
				"uavi",
				"UAVI.cpp"
			],
			[
				"uavh",
				"UAV.h"
			],
			[
				"make",
				"Makefile"
			],
			[
				"uavph",
				"UAVP.h"
			],
			[
				"uac",
				"UAV.cpp"
			],
			[
				"uap",
				"UAVP.h"
			],
			[
				"uacp",
				"UAVP.cpp"
			],
			[
				"uavcpp",
				"UAV.cpp"
			],
			[
				"uavc",
				"UAV.cpp"
			],
			[
				"utilh",
				"UTIL.h"
			],
			[
				"ut",
				"UTIL.h"
			],
			[
				"util.cpp",
				"UTIL.cpp"
			],
			[
				"uavpc",
				"UAVP.cpp"
			],
			[
				"uav.cpp",
				"UAV.cpp"
			],
			[
				"uav.c",
				"UAV.cpp"
			],
			[
				"utilc",
				"UTIL.cpp"
			],
			[
				"fgi.c",
				"FGI.cpp"
			],
			[
				"utile",
				"untitled"
			],
			[
				"uav.",
				"UAV.h"
			],
			[
				"de",
				"debug.cpp"
			],
			[
				"fg",
				"FGI.cpp"
			],
			[
				"x",
				"doc/xor_test.c"
			],
			[
				"xor",
				"doc/xor_train.c"
			],
			[
				"xo",
				"doc/xor_test.c"
			],
			[
				"pro",
				"project.sublime-workspace"
			],
			[
				"utl",
				"UTIL.h"
			],
			[
				"ua",
				"UAVP.cpp"
			],
			[
				"pr",
				"project.sublime-project"
			],
			[
				"buil",
				"/home/tux/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap"
			],
			[
				"proje",
				"project.sublime-project"
			],
			[
				"fgh",
				"FGI.h"
			],
			[
				"uav.h",
				"UAV.h"
			],
			[
				"deu",
				"debug.cpp"
			],
			[
				"uav.cp",
				"UAV.cpp"
			],
			[
				"util.h",
				"UTIL.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": false,
	"side_bar_visible": false,
	"side_bar_width": 280.0,
	"status_bar_visible": true
}
